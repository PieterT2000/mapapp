{"version":3,"sources":["Map/MapWrapper.jsx","App.js","reportWebVitals.js","index.js"],"names":["MapWrapper","props","useState","map","setMap","featuresLayer","setFeaturesLayer","mapElement","useRef","useEffect","proj4","defs","register","dutchProjection","getProjection","vectorSource","VectorSource","format","GeoJSON","url","vector","VectorLayer","source","style","Style","stroke","Stroke","color","width","fill","Fill","initialMap","Map","target","current","layers","TileLayer","OSM","view","View","projection","center","zoom","features","length","setSource","extent","values_","geometry","extent_","getView","fit","padding","ref","className","App","woonplaats","setWoonplaats","setFeatures","api","onSubmit","e","preventDefault","filterStr","encodeURIComponent","fetch","then","res","json","fetchedFeatures","parsedFeatures","readFeatures","handleSubmit","onChange","val","value","charAt","toUpperCase","slice","handleInput","type","autoComplete","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6UA+FeA,EAlFI,SAACC,GAAW,IAAD,EACNC,qBADM,mBACrBC,EADqB,KAChBC,EADgB,OAEcF,mBAAS,MAFvB,mBAErBG,EAFqB,KAENC,EAFM,KAKtBC,EAAaC,mBA0EnB,OAvEAC,qBAAU,WAERC,IAAMC,KACJ,aACA,sIAEFC,YAASF,KACT,IAAMG,EAAkBC,YAAc,cAGhCC,EAAe,IAAIC,IAAa,CACpCC,OAAQ,IAAIC,IACZC,IACE,6LAGEC,EAAS,IAAIC,IAAY,CAC7BC,OAAQP,EACRQ,MAAO,IAAIC,IAAM,CACfC,OAAQ,IAAIC,IAAO,CACjBC,MAAO,uBACPC,MAAO,IAETC,KAAM,IAAIC,IAAK,CACbH,MAAO,6BAKPI,EAAa,IAAIC,IAAI,CACzBC,OAAQ1B,EAAW2B,QAEnBC,OAAQ,CACN,IAAIC,IAAU,CACZd,OAAQ,IAAIe,MAEdjB,GAEFkB,KAAM,IAAIC,IAAK,CACbC,WAAY3B,EAEZ4B,OAAQ,CAAC,UAAW,WACpBC,KAAM,MAIVtC,EAAO2B,GAEPzB,EAAiBc,KAChB,IAEHX,qBAAU,WAAO,IACPkC,EAAa1C,EAAb0C,SAGR,GAAIA,EAASC,OAAQ,CACnBvC,EAAcwC,UACZ,IAAI7B,IAAa,CACf2B,cAKJ,IAAMG,EAASH,EAAS,GAAGI,QAAQC,SAASC,QAE5C9C,EAAI+C,UAAUC,IAAIL,EAAQ,CACxBM,QAAS,CAAC,IAAK,IAAK,IAAK,UAG5B,CAACnD,EAAM0C,WAEH,qBAAKU,IAAK9C,EAAY+C,UAAU,mBCpC1BC,MAlDf,WAAgB,IAAD,EACuBrD,mBAAS,IADhC,mBACNsD,EADM,KACMC,EADN,OAEmBvD,mBAAS,IAF5B,mBAENyC,EAFM,KAEIe,EAFJ,KAITC,EACF,8JA6BF,OACE,sBAAKL,UAAU,MAAf,UACE,2CACA,uBAAMM,SAAU,SAACC,GAAD,OAvBC,SAACA,GAEpB,GADAA,EAAEC,iBACGN,EAAL,CAEA,IACMO,EAAS,yFAAqFP,EAArF,2CACfG,GAFmB,WAECK,mBAAmBD,GAGvCE,MAAMN,GACHO,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAEL,IAAMC,GAAiB,IAAIpD,KAAUqD,aAAaF,GAGlDX,EAAYY,OAOSE,CAAaX,IAApC,UACE,uBACEY,SAAU,SAACZ,GAAD,OAhCE,SAACA,GACnB,IAAIa,EAAMb,EAAE5B,OAAO0C,MAEnBD,EAAMA,EAAIE,OAAO,GAAGC,cAAgBH,EAAII,MAAM,GAC9CrB,EAAciB,GA4BSK,CAAYlB,IAC7BmB,KAAK,OACLC,aAAa,QAEf,+CAEF,cAAC,EAAD,CAAYtC,SAAUA,QCvCbuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.be082771.chunk.js","sourcesContent":["import \"ol/ol.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Map, View } from \"ol\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport TileLayer from \"ol/layer/Tile\";\nimport OSM from \"ol/source/OSM\";\nimport { GeoJSON } from \"ol/format\";\nimport { Stroke, Fill, Style } from \"ol/style\";\nimport proj4 from \"proj4\";\nimport { register } from \"ol/proj/proj4\";\nimport { get as getProjection } from \"ol/proj\";\n\nconst MapWrapper = (props) => {\n  const [map, setMap] = useState();\n  const [featuresLayer, setFeaturesLayer] = useState(null);\n\n  // Stores reference to element into which map should render\n  const mapElement = useRef();\n\n  // Initialize map on first render\n  useEffect(() => {\n    // Set Dutch projection definition that is to be used by the OSM baselayer\n    proj4.defs(\n      \"EPSG:28992\",\n      \"+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +units=m +no_defs\"\n    );\n    register(proj4);\n    const dutchProjection = getProjection(\"EPSG:28992\");\n\n    // Initial Vector source -> Bommelerwaard Woonplaatsen\n    const vectorSource = new VectorSource({\n      format: new GeoJSON(),\n      url:\n        \"https://geodata.nationaalgeoregister.nl/bag/wfs/v1_1?service=WFS&version=2.0.0&request=GetFeature&typename=bag:woonplaats&outputFormat=json&bbox=135182.04,421669.31,140942.71,425358.39\",\n    });\n\n    const vector = new VectorLayer({\n      source: vectorSource,\n      style: new Style({\n        stroke: new Stroke({\n          color: \"rgba(0, 0, 255, 1.0)\",\n          width: 2,\n        }),\n        fill: new Fill({\n          color: \"rgba(0, 0, 255, 0.4)\",\n        }),\n      }),\n    });\n\n    const initialMap = new Map({\n      target: mapElement.current,\n      // set Open Street map as base map\n      layers: [\n        new TileLayer({\n          source: new OSM(),\n        }),\n        vector,\n      ],\n      view: new View({\n        projection: dutchProjection,\n        // Take Hilversum as center\n        center: [142892.19, 470783.87],\n        zoom: 9,\n      }),\n    });\n\n    setMap(initialMap);\n    // Save features to state so we can later edit the vector source if props.features changes\n    setFeaturesLayer(vector);\n  }, []);\n\n  useEffect(() => {\n    const { features } = props;\n\n    // On first render or in case the API returned nothing, features will be an empty array\n    if (features.length) {\n      featuresLayer.setSource(\n        new VectorSource({\n          features,\n        })\n      );\n\n      // Get Extent\n      const extent = features[0].values_.geometry.extent_;\n      // Zoom map to extent of vector layer\n      map.getView().fit(extent, {\n        padding: [100, 100, 100, 100],\n      });\n    }\n  }, [props.features]);\n\n  return <div ref={mapElement} className=\"map-container\"></div>;\n};\n\nexport default MapWrapper;\n","import \"./App.scss\";\nimport React, { useState } from \"react\";\n\nimport MapWrapper from \"./Map/MapWrapper\";\nimport { GeoJSON } from \"ol/format\";\n\nfunction App() {\n  const [woonplaats, setWoonplaats] = useState(\"\");\n  const [features, setFeatures] = useState(\"\");\n\n  let api =\n    \"https://geodata.nationaalgeoregister.nl/bag/wfs/v1_1?service=WFS&version=2.0.0&request=GetFeature&typename=bag:woonplaats&count=5&outputFormat=json&count-5\";\n\n  const handleInput = (e) => {\n    let val = e.target.value;\n    // Capitalize woonplaats\n    val = val.charAt(0).toUpperCase() + val.slice(1);\n    setWoonplaats(val);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!woonplaats) return;\n\n    const queryParam = \"&filter=\";\n    const filterStr = `<Filter><PropertyIsEqualTo><PropertyName>bag:woonplaats</PropertyName><Literal>${woonplaats}</Literal></PropertyIsEqualTo></Filter>`;\n    api += queryParam + encodeURIComponent(filterStr);\n\n    // Fetch new vector source\n    fetch(api)\n      .then((res) => res.json())\n      .then((fetchedFeatures) => {\n        // Parse Features from return JSON object\n        const parsedFeatures = new GeoJSON().readFeatures(fetchedFeatures);\n\n        // Pass features on to MapWrapper component (state value gets passed a prop)\n        setFeatures(parsedFeatures);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Test map!</h1>\n      <form onSubmit={(e) => handleSubmit(e)}>\n        <input\n          onChange={(e) => handleInput(e)}\n          type=\"text\"\n          autoComplete=\"off\"\n        />\n        <button>Submit</button>\n      </form>\n      <MapWrapper features={features} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}